(function() {var implementors = {};
implementors["byteorder"] = [{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T:&nbsp;Clone, N&gt; Clone for GenericArray&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, N&gt; Clone for GenericArrayIter&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["heapless"] = [{"text":"impl&lt;T:&nbsp;Clone, N:&nbsp;Clone&gt; Clone for HistoryBuffer&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, N, S&gt; Clone for IndexMap&lt;K, V, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;Bucket&lt;K, V&gt;&gt; + ArrayLength&lt;Option&lt;Pos&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, N, S&gt; Clone for IndexSet&lt;T, N, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Eq + Hash + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;Bucket&lt;T, ()&gt;&gt; + ArrayLength&lt;Option&lt;Pos&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;K, V, N&gt; Clone for LinearMap&lt;K, V, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;(K, V)&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Eq + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; Clone for String&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;u8&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, N&gt; Clone for Vec&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, N, K&gt; Clone for BinaryHeap&lt;T, N, K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Kind,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Ord + Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, N, C&gt; Clone for Queue&lt;T, N, u8, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: XCore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, N, C&gt; Clone for Queue&lt;T, N, u16, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: XCore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T, N, C&gt; Clone for Queue&lt;T, N, usize, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: XCore,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, N, U, C&gt; Clone for Iter&lt;'a, T, N, U, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Uxx,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: XCore,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Clone for B0","synthetic":false,"types":[]},{"text":"impl Clone for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone + Unsigned + NonZero&gt; Clone for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone + Unsigned + NonZero&gt; Clone for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Z0","synthetic":false,"types":[]},{"text":"impl Clone for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Clone, A:&nbsp;Clone&gt; Clone for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Greater","synthetic":false,"types":[]},{"text":"impl Clone for Less","synthetic":false,"types":[]},{"text":"impl Clone for Equal","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()